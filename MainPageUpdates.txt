    private async Task ShowWelcomeDialog()
    {
        string welcomeMessage = "Welcome to File Organizer V3! üöÄ\n\n" +
                               "üé® STUNNING FEATURES:\n" +
                               "‚Ä¢ Beautiful animations and effects\n" +
                               "‚Ä¢ Scroll-based card transformations\n" +
                               "‚Ä¢ Shimmer button effects\n" +
                               "‚Ä¢ Smart file organization\n" +
                               "‚Ä¢ Advanced duplicate detection\n\n" +
                               "üì± PERMISSIONS:\n" +
                               "‚Ä¢ The app will request storage permissions\n" +
                               "‚Ä¢ This allows access to your Downloads folder\n" +
                               "‚Ä¢ Required for organizing and scanning files\n\n" +
                               "Choose an action to get started! ‚ú®";

        await DisplayAlert("Welcome", welcomeMessage, "Let's Go! üöÄ");
    }

    private async void OnSortFilesClicked(object sender, EventArgs e)
    {
        try
        {
            await AnimateButtonWithShimmer(SortFilesButton, SortButtonShimmer);
            SetUIBusy(true, "üîÑ Organizing files with style...");

            // Request permissions and get Downloads path
            string downloadsPath;
            try
            {
                downloadsPath = await _permissionsService.GetDownloadsPathWithPermissionCheck();
            }
            catch (UnauthorizedAccessException)
            {
                await DisplayAlert("Permissions Required", 
                    "Storage permissions are required to organize files. Please grant permissions in your device settings.", 
                    "OK");
                return;
            }
            catch (DirectoryNotFoundException)
            {
                await DisplayAlert("Error", "Could not access Downloads folder", "OK");
                return;
            }

            LogActivity($"üìÇ Scanning: {downloadsPath}");

            await Task.Run(() => _fileScanner.FilterByType(downloadsPath));

            int totalFiles = _fileScanner.FileGroups.Sum(group => group.Value.Count);
            
            if (totalFiles == 0)
            {
                LogActivity("‚ÑπÔ∏è No files found to organize");
                await DisplayAlert("Info", "No files found to organize in Downloads folder", "OK");
                return;
            }

            LogActivity($"üìä Found {totalFiles} files to organize");

            int processedFiles = 0;

            foreach (var category in _fileScanner.FileGroups)
            {
                foreach (string file in category.Value)
                {
                    try
                    {
                        string fileName = Path.GetFileName(file);
                        await _fileMover.MoveFileToCategory(file, category.Key);
                        
                        LogActivity($"‚úÖ Moved: {fileName} ‚Üí {category.Key}");
                        
                        processedFiles++;
                        await UpdateProgressAsync((double)processedFiles / totalFiles);
                    }
                    catch (Exception ex)
                    {
                        string fileName = Path.GetFileName(file);
                        LogActivity($"‚ùå Failed to move {fileName}: {ex.Message}");
                    }
                }
            }

            await AnimateSpectacularSuccess();
            UpdateQuickStats($"‚ú® Organized {processedFiles} files into categories");
            LogActivity($"üéâ Organization complete! Processed {processedFiles} files");
            await DisplayAlert("Success! üéâ", $"Successfully organized {processedFiles} files!", "Awesome! üöÄ");
        }
        catch (Exception ex)
        {
            LogActivity($"üí• Error during organization: {ex.Message}");
            await DisplayAlert("Error", $"An error occurred: {ex.Message}", "OK");
        }
        finally
        {
            SetUIBusy(false);
        }
    }

    private async void OnFindDuplicatesClicked(object sender, EventArgs e)
    {
        try
        {
            await AnimateButtonWithShimmer(FindDuplicatesButton, DuplicateButtonShimmer);
            SetUIBusy(true, "üîç Finding duplicates with precision...");

            // Request permissions and get Downloads path
            string downloadsPath;
            try
            {
                downloadsPath = await _permissionsService.GetDownloadsPathWithPermissionCheck();
            }
            catch (UnauthorizedAccessException)
            {
                await DisplayAlert("Permissions Required", 
                    "Storage permissions are required to scan for duplicates. Please grant permissions in your device settings.", 
                    "OK");
                return;
            }
            catch (DirectoryNotFoundException)
            {
                await DisplayAlert("Error", "Could not access Downloads folder", "OK");
                return;
            }

            LogActivity($"üîç Scanning for duplicates in: {downloadsPath}");

            var progress = new Progress<string>(message =>
            {
                MainThread.BeginInvokeOnMainThread(() =>
                {
                    ProgressLabel.Text = message;
                    LogActivity(message);
                });
            });

            var duplicates = await _duplicateDetector.FindDuplicatesAsync(downloadsPath, progress);

            if (duplicates.Count == 0)
            {
                await AnimateSpectacularSuccess();
                LogActivity("‚ú® No duplicates found!");
                await DisplayAlert("Great News! ‚ú®", "No duplicate files found!", "Excellent! üéØ");
                return;
            }

            long wastedSpace = await _duplicateDetector.GetTotalWastedSpaceAsync();
            string wastedSpaceFormatted = FormatFileSize(wastedSpace);

            UpdateQuickStats($"üîç Found {duplicates.Count} duplicate groups");
            LogActivity($"üîç Found {duplicates.Count} duplicate groups, wasting {wastedSpaceFormatted}");
            
            await DisplayAlert("Duplicates Found! üîç", 
                $"Found {duplicates.Count} groups of duplicate files\nWasted space: {wastedSpaceFormatted}", 
                "OK");
        }
        catch (Exception ex)
        {
            LogActivity($"üí• Error during duplicate detection: {ex.Message}");
            await DisplayAlert("Error", $"An error occurred: {ex.Message}", "OK");
        }
        finally
        {
            SetUIBusy(false);
        }
    }
